pipeline {
    agent any

    environment {
        SONARQUBE_SCANNER_HOME = tool name: 'SonarQube_Scanner' // Matches configured scanner tool in Jenkins
        SONAR_PROJECT_KEY = 'NPS_Controller'                // Unique identifier for the project
        SONAR_HOST_URL = 'http://34.213.46.217:9000'        // SonarQube server address
        SONAR_TOKEN = credentials('Sonar_Token')            // Jenkins credentials storing the SonarQube token
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning the GitHub repository..."
                git branch: 'main', url: 'https://github.com/simonebinezer/NPS_controller.git'
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // Ensure 'SonarQube' matches your Jenkins configuration
                    script {
                        sh """
                            ${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -X
                        """
                    }
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                script {
                    timeout(time: 3, unit: 'MINUTES') {  // Set a timeout of 3 minutes for Quality Gate check
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "‚ùå Pipeline failed due to SonarQube Quality Gate"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        failure {
            echo 'Pipeline execution failed. Check the logs for details.'
        }
    }
}
